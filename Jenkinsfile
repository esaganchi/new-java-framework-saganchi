pipeline {
    agent any
    
    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['all', 'api', 'ui'],
            description: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
        )
        choice(
            name: 'BROWSER',
            choices: ['chrome', 'firefox'],
            description: '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤'
        )
        booleanParam(
            name: 'GENERATE_ALLURE_REPORT',
            defaultValue: true,
            description: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Allure –æ—Ç—á–µ—Ç'
        )
        booleanParam(
            name: 'USE_DOCKER',
            defaultValue: true,
            description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤'
        )
    }
    
    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk'
        GRADLE_OPTS = '-Xmx2g -Dorg.gradle.daemon=false'
        SELENIUM_REMOTE_URL = 'http://selenium-hub:4444/wd/hub'
        ALLURE_RESULTS_PATH = 'build/allure-results'
    }
    
    tools {
        jdk 'Java17'
        gradle 'Gradle8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
                checkout scm
            }
        }
        
        stage('Gradle Wrapper') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'chmod +x gradlew'
                    }
                }
            }
        }
        
        stage('Clean & Build') {
            steps {
                echo '–û—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...'
                script {
                    if (isUnix()) {
                        sh './gradlew clean build -x test'
                    } else {
                        bat 'gradlew.bat clean build -x test'
                    }
                }
            }
        }
        
        stage('Setup Test Environment') {
            when {
                params.USE_DOCKER == true
            }
            steps {
                echo '–ó–∞–ø—É—Å–∫ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è...'
                script {
                    sh '''
                        docker-compose down --volumes --remove-orphans
                        docker-compose up -d selenium-hub chrome firefox
                        sleep 30
                        docker-compose ps
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${params.TEST_SUITE}"
                script {
                    def testCommand = buildTestCommand()
                    
                    try {
                        if (params.USE_DOCKER) {
                            sh """
                                export SELENIUM_REMOTE_URL=${SELENIUM_REMOTE_URL}
                                ${testCommand}
                            """
                        } else {
                            if (isUnix()) {
                                sh testCommand
                            } else {
                                bat testCommand.replace('./gradlew', 'gradlew.bat')
                            }
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'UNSTABLE'
                        echo "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Generate Allure Report') {
            when {
                params.GENERATE_ALLURE_REPORT == true
            }
            steps {
                echo '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞...'
                script {
                    if (isUnix()) {
                        sh './gradlew allureReport'
                    } else {
                        bat 'gradlew.bat allureReport'
                    }
                }
            }
        }
        
        stage('Archive Results') {
            steps {
                echo '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...'
                
                // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'build/reports/tests/test',
                    reportFiles: 'index.html',
                    reportName: 'Gradle Test Report'
                ])
                
                // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                script {
                    if (params.GENERATE_ALLURE_REPORT) {
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: env.ALLURE_RESULTS_PATH]]
                        ])
                    }
                }
                
                // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                archiveArtifacts(
                    artifacts: 'build/reports/**/*,build/allure-results/**/*',
                    allowEmptyArchive: true,
                    fingerprint: true
                )
            }
        }
        
        stage('Publish Test Results') {
            steps {
                echo '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤...'
                
                publishTestResults([
                    testResultsPattern: 'build/test-results/test/TEST-*.xml'
                ])
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                script {
                    def testResults = currentBuild.rawBuild.getAction(hudson.tasks.test.AbstractTestResultAction.class)
                    if (testResults) {
                        def total = testResults.totalCount
                        def failed = testResults.failCount
                        def skipped = testResults.skipCount
                        def passed = total - failed - skipped
                        
                        echo """
                        üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
                        ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}
                        ‚ùå –£–ø–∞–ª–æ: ${failed}
                        ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}
                        üìà –í—Å–µ–≥–æ: ${total}
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo '–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...'
            script {
                if (params.USE_DOCKER) {
                    sh '''
                        docker-compose logs selenium-hub chrome firefox || true
                        docker-compose down --volumes --remove-orphans || true
                    '''
                }
            }
        }
        
        success {
            echo '‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
            script {
                if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master') {
                    echo 'üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å'
                }
            }
        }
        
        failure {
            echo '‚ùå –ü–∞–π–ø–ª–∞–π–Ω —É–ø–∞–ª!'
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Teams/Email
        }
        
        unstable {
            echo '‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏'
        }
        
        cleanup {
            echo '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ workspace...'
            cleanWs()
        }
    }
}

def buildTestCommand() {
    def command = './gradlew test --no-daemon'
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–æ–≤
    switch(params.TEST_SUITE) {
        case 'api':
            command += ' --tests "*ApiTests*"'
            break
        case 'ui':
            command += ' --tests "*UiTests*" --tests "*UIPomTests*"'
            break
        case 'all':
        default:
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            break
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    command += ' -Dselenium.browser=' + params.BROWSER
    
    if (params.USE_DOCKER) {
        command += ' -Dselenium.grid.enabled=true'
    }
    
    return command
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
def publishTestResults(Map args) {
    junit(
        testResults: args.testResultsPattern,
        allowEmptyResults: true,
        skipPublishingChecks: false,
        keepLongStdio: true
    )
}